サーブレットのデータの流れ

ViewMenuBoardServlet
最後　クリックされたURLの投稿IDを元に該当の行のデータを全て
　　　リクエストスコープに格納してBoardServletにフォワードする
　　（リダイレクトの場合はデータが保持されない為
　　　セッションスコープにすれば保持できるが、クリックされるたびに
　　　URLをセッションスコープに保存するとメモリが圧迫される）

↓　　　　　↓　　　　　↓　　　　　↓　　　　　↓　　　　　↓　　　　　↓　　　　　

BoardViewServlet
※前提としてMenuBoardServletからフォワードされている
1：リダイレクトチェック
2：リクエストスコープ内の値（上記のデータ）を受け取る
3：ReplyDao.javaのインスタンスを作成する(投稿ID以外のパラメータ以外は仮置き)
4：ReplyDao.javaのshowReplyメソッド（仮名）を用いて該当の投稿IDの
   返信要素をリクエストスコープに格納
  （showReplyの返り値はオブジェクト型（インスタンス型：Borad）のリスト）
5：データを格納したリクエストスコープと共にViewBoard.jspにフォワードする

↓　　　　　↓　　　　　↓　　　　　↓　　　　　↓　　　　　↓　　　　　↓　　　　　

BoardView.jsp
1：投稿の出力
2：返信の出力
※参照するリクエストスコープのリスト名は異なる
※jsp内でjava記載でユーザーIDとセッションスコープに入っているID
　が等しい投稿及び返信のみ、編集/削除ボタンを表示する

3-検索：検索ボタンが押されたらBoardViewServletに入力された値をPOSTする
3-返信：返信ボタンが押されたらBoardViewServletに入力された値をPOSTする
3-編集：編集ボタンが押されたらBoardViewServletに入力された値をPOSTする
3-削除：削除ボタンが押されたらBoardViewServletに入力された値をPOSTする
※name属性を設定し、value属性の値で場合分けを行う

4：リアクションボタンの登録ボタンのクリックで
　　BoardViewServletに入力された値をPOSTする
　　（フォワードした状態でも、javascript内の変数の値が保存されている場合
　　　登録ボタンを作成しない方法でリアクションの更新が行える）

↓　　　　　↓　　　　　↓　　　　　↓　　　　　↓　　　　　↓　　　　　↓　　　　　

BoardViewServlet　
※前提としてBoardView.jspからデータをPOSTされ、フォワードされている
　また、下記の振り分けはname属性submitのvalue属性部分で場合分け

6-検索-1：受け取った検索ワードを返信内容の変数部分に格納し、
　　　　　他は仮のパラメータの状態でReplyDaoのインスタンスを作成
6-検索-2：ReplyDao.javaのsearchReplyメソッド（仮名）を用いて部分検索を
　　　　　行いヒットしたデータ行すべてをリストに格納
6-検索-3：格納した状態で再度BoardView.jspにフォワードする
　　　　　※ここのjspは分けた方が簡潔になる可能性あり
　　　　　　ヒットした返信の表示の仕方は未定

6-返信-1：受け取った返信内容とセッションID（ログイン中のユーザーID）と
　　　　　投稿IDを元にインスタンス（Reply.java：他のパラメータは仮置き）
　　　　　を作成する
        （メソッドの引数をいじればいいだけなのでもしかしたらインスタンスを
        　作る必要はないかも：必要なパラメータを引数にすれば良い）
6-返信-2：ReplyDao.javaのregistReplyメソッド（仮名）を用いて、返信テーブルに
　　　　　データをinsertする。

6-編集-1：受け取ったパラメータを用いてReplyDao.java/BoardDao.javaの
          editReply/editBoardメソッド（仮名）で編集を行う（データベースを更新する）

6-削除-1：受け取ったパラメータの返信ID/投稿IDを用いて、
          ReplyDao.java/BoardDao.javaのdeleteReply/deleteBoardメソッド
          で削除を行う（データベースの対象行の削除）
※投稿が削除された場合に該当する返信を全て削除するかどうかは保留

7-リアクション：受け取ったパラメータ（リアクションの数）を引数に
              BoardDao.javaのeditReactionメソッドで代用してリアクション
              の増減を行う（データベースの更新）
※ページを更新した際に再度リアクションを投稿できるんじゃないか問題
